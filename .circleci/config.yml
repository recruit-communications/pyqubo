version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:

##################################################################################################
# Linux
##################################################################################################

  test-linux-36: &linux-test-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64:latest
    
    environment:
      PYTHON_PATH: /opt/python/cp36-cp36m
    
    working_directory: ~/repo

    steps:

      - checkout
      
      - run: &set-python-path
          name: set python path
          command: |
            echo 'export PATH=$PYTHON_PATH/bin/:$PATH' >> $BASH_ENV
            source $BASH_ENV
            python -V
      
      - run: &create-virtualenv
          name: create virtualenv
          command: |
            python --version
            python -m pip install virtualenv
            python -m virtualenv env
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &install-dependencies-template
          name: install dependencies
          command: |
            # Install dependencies such that pre-release versions are not installed when executing `setup.py install`
            . env/bin/activate
            python --version
            pip install -r requirements.txt
      
      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &install-package-template
          name: install package
          command: |
            . env/bin/activate
            python --version
            python setup.py install

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover
  
  
  test-linux-doctest:
    <<: *linux-test-template
  
    steps:

      - checkout
      
      - run: *set-python-path
      
      - run: *create-virtualenv
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_doctest.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install -r requirements.txt
            pip install -r requirements_doctest.txt

      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements_doctest.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-package-template
      
      - run: *run-tests-template
      
      - run:
          name: test doc build
          command: |
            . env/bin/activate
            sphinx-build -W -b html docs docs/_build/html
      
      - run:
          name: run doctest
          command: |
            . env/bin/activate
            make doctest
  
  test-linux-35:
    <<: *linux-test-template
    environment:
      PYTHON_PATH: /opt/python/cp35-cp35m

  test-linux-37:
    <<: *linux-test-template
    environment:
      PYTHON_PATH: /opt/python/cp37-cp37m
  
  test-linux-38:
    <<: *linux-test-template
    environment:
      PYTHON_PATH: /opt/python/cp38-cp38
  
  test-linux-39:
    <<: *linux-test-template
    environment:
      PYTHON_PATH: /opt/python/cp39-cp39
  
  test-linux32-35:
    <<: *linux-test-template
    docker:
      - image: quay.io/pypa/manylinux1_i686:latest
    environment:
      PYTHON_PATH: /opt/python/cp35-cp35m
  
  test-linux32-36:
    <<: *linux-test-template
    docker:
      - image: quay.io/pypa/manylinux1_i686:latest
    environment:
      PYTHON_PATH: /opt/python/cp36-cp36m
  
  test-linux32-37:
    <<: *linux-test-template
    docker:
      - image: quay.io/pypa/manylinux1_i686:latest
    environment:
      PYTHON_PATH: /opt/python/cp37-cp37m
  
  test-linux32-38:
    <<: *linux-test-template
    docker:
      - image: quay.io/pypa/manylinux1_i686:latest
    environment:
      PYTHON_PATH: /opt/python/cp38-cp38
  
  test-linux32-39:
    <<: *linux-test-template
    docker:
      - image: quay.io/pypa/manylinux1_i686:latest
    environment:
      PYTHON_PATH: /opt/python/cp39-cp39

  deploy-linux: &deploy-linux-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64:latest
    
    environment:
      GIT_URL: << pipeline.project.git_url >>
      GIT_REVISION: << pipeline.git.revision >>
      GIT_TAG: << pipeline.git.tag >>
    
    working_directory: ~/repo

    steps:
      - run:
          name: checkout directory
          command: |
            # For the bug of CircleCI that checkout doesn't work when the tag is added
            echo $GIT_URL
            echo $GIT_REVISION
            echo $GIT_TAG
            cd ../
            rm -rf repo
            git clone $GIT_URL repo
            cd repo
            git checkout -b workbranch $GIT_REVISION
      
      - run:
          name: build wheels
          command: |
            for PYBIN in /opt/python/*/bin; do
              echo $PYBIN
              if "${PYBIN}/python" -c "import sys; sys.exit(sys.version_info>=(3, 5) and sys.version_info<(3, 10))"; then continue; fi;
              "${PYBIN}/pip" install -r requirements.txt
              #"${PYBIN}/pip" wheel . -w ./wheelhouse
              PATH=$PYBIN:$PATH python setup.py bdist_wheel -d ./wheelhouse
              "${PYBIN}/python" setup.py sdist -d ./dist
            done
      
      - run:
          name: bundle shared libraries into wheels
          command: |
            ls ./wheelhouse/
            for whl in ./wheelhouse/pyqubo*.whl; do
              auditwheel repair "$whl" -w ./dist
            done
      
      - store_artifacts:
          path: ./dist

      - run: &init-pypirc
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            
            # for testpypi
            #echo -e "repository = https://test.pypi.org/legacy/" >> ~/.pypirc
            #echo -e "password = $TEST_PYPI_PASSWORD" >> ~/.pypirc

            # for actual pypi
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: python setup
          command: |
            echo 'export PATH=/opt/python/cp36-cp36m/bin/:$PATH' >> $BASH_ENV
            source $BASH_ENV
            python -V
      
      - run: *create-virtualenv
      
      - run: &upload-wheel
          name: install twine and deploy
          command: |
            . env/bin/activate
            pip install twine==1.15.0
            twine upload --skip-existing ./dist/*

  deploy-linux32:
    <<: *deploy-linux-template
    docker:
      - image: quay.io/pypa/manylinux1_i686:latest

##################################################################################################
# Mac OSX
##################################################################################################

  test-osx-36: &test-osx-template
    macos:
      xcode: "11.2.0"
    environment:
      PYTHON: 3.6.5
      HOMEBREW_NO_AUTO_UPDATE: 1
    
    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - v6-brew_cache-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1

      - run: &brew-update
          name: brew update
          command: |
            # Only when the brew is not updated and Python=3.9, we update the brew
            # since the older pyenv doesn't contain Python3.9.
            
            brew --version
            brew_version=`echo "$(brew -v)" | head -n 1 | awk '{print $2}'`
            if [ $PYTHON = 3.9.1 -a $brew_version = 2.1.16 ]; then
              brew update
            fi
            brew --version
      
      - save_cache:
          key: v6-brew_cache-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1
          paths:
            - /Users/distiller/Library/Caches/Homebrew
            - /usr/local/Homebrew
      
      - run: &install-cmake-pyenv
          name: install cmake
          command: |
            brew --version
            brew install cmake
            brew install pyenv

      - restore_cache:
          keys:
            - v4-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1

      - run: &install-python
          name: install python
          command: |
            pyenv install $PYTHON -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: v4-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1
      
      - run: &create-virtualenv-using-pyenv
          name: create virtualenv
          command: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            
            eval "$(pyenv init --path)"
            pyenv local $PYTHON
            which python
            python -m pip install virtualenv
            python -m virtualenv env
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-dependencies-template

      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-package-template

      - run: *run-tests-template

      - run:
          name: codecov
          command: |
            . env/bin/activate
            # skip here when local run
            if ! ([ -z "$CIRCLE_PROJECT_REPONAME" ] || [ -z "$CIRCLE_PROJECT_USERNAME" ]); then
              codecov
            fi
  
  test-osx-35:
    <<: *test-osx-template
    environment:
      PYTHON: 3.5.8
      HOMEBREW_NO_AUTO_UPDATE: 1

  test-osx-37:
    <<: *test-osx-template
    environment:
      PYTHON: 3.7.5
      HOMEBREW_NO_AUTO_UPDATE: 1
  
  test-osx-38:
    <<: *test-osx-template
    environment:
      PYTHON: 3.8.0
      HOMEBREW_NO_AUTO_UPDATE: 1
  
  test-osx-39:
    <<: *test-osx-template
    environment:
      PYTHON: 3.9.1
      HOMEBREW_NO_AUTO_UPDATE: 0
      
  deploy-osx-36: &deploy-osx-template
    macos:
      xcode: "11.2.0"
    
    environment:
      PYTHON: 3.6.5
      HOMEBREW_NO_AUTO_UPDATE: 1
      MACOSX_DEPLOYMENT_TARGET: 10.9
    
    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - v6-brew_cache-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1
      
      - run: *brew-update
      
      - save_cache:
          key: v6-brew_cache-{{ .Environment.CIRCLE_JOB }}-xcode11.2.1
          paths:
            - /Users/distiller/Library/Caches/Homebrew
            - /usr/local/Homebrew

      - run: *install-cmake-pyenv

      - restore_cache:
          keys:
            - v4-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode11.2.0

      - run: *install-python

      - save_cache:
          paths:
            - ~/.pyenv
          key: v4-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode11.2.0
      
      - run: *create-virtualenv-using-pyenv
      
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-dependencies-template

      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-package-template

      - run: *run-tests-template
      
      - run:
          name: create bdist_wheel
          command: |
            . env/bin/activate
            python setup.py bdist_wheel
      
      - store_artifacts:
          path: ./dist

      - run: *init-pypirc
      
      - run: *upload-wheel
  
  deploy-osx-35:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.5.8
      HOMEBREW_NO_AUTO_UPDATE: 1
      MACOSX_DEPLOYMENT_TARGET: 10.9
  
  deploy-osx-37:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.7.5
      HOMEBREW_NO_AUTO_UPDATE: 1
      MACOSX_DEPLOYMENT_TARGET: 10.9
  
  deploy-osx-38:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.8.0
      HOMEBREW_NO_AUTO_UPDATE: 1
      MACOSX_DEPLOYMENT_TARGET: 10.9
  
  deploy-osx-39:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.9.1
      HOMEBREW_NO_AUTO_UPDATE: 0
      MACOSX_DEPLOYMENT_TARGET: 10.9

  
##################################################################################################
# Windows
##################################################################################################

  test-win-36: &test-win-template
    executor:
      name: win/default
      shell: bash.exe
    
    environment:
      PYTHON: 3.6.5
      PYTHON_PATH: C:/Python36/

    steps:
      - checkout

      - run: &win-install-camke-python
          name: install cmake and python
          command: |
            choco install -y cmake
            
            # Python 3.7 is already installed
            if [ $PYTHON != '3.7.3' ]; then
            choco install -y python --version "${PYTHON}"
            fi
      
      - run:
          name: install pyqubo
          command: |
            export PATH=$PATH:"C:\Program Files\CMake\bin"
            $PYTHON_PATH/python -m pip install -r requirements.txt
            $PYTHON_PATH/python setup.py install

      - run:
          name: run unittests
          command: |
            $PYTHON_PATH/python -m unittest

  test-win-37:
    <<: *test-win-template
    environment:
      PYTHON: 3.7.3
      PYTHON_PATH: C:/tools/miniconda3
  
  test-win-38:
    <<: *test-win-template
    environment:
      PYTHON: 3.8.5
      PYTHON_PATH: C:/Python38/
  
  test-win-39:
    <<: *test-win-template
    environment:
      PYTHON: 3.9.1
      PYTHON_PATH: C:/Python39/
  
  test-win-35:
    <<: *test-win-template
    environment:
      PYTHON: 3.5.4
      PYTHON_PATH: C:/Python35/
  
  deploy-win-36: &deploy-win-template
    executor:
      name: win/default
      shell: bash.exe
    
    environment:
      PYTHON: 3.6.5
      PYTHON_PATH: C:/Python36/

    steps:
      - checkout

      - run: *win-install-camke-python
      
      - run:
          name: create wheel and test install
          command: |
            export PATH=$PATH:"C:\Program Files\CMake\bin"
            $PYTHON_PATH/python -m pip install -r requirements.txt
            $PYTHON_PATH/python -m pip install wheel twine
            $PYTHON_PATH/python setup.py bdist_wheel
            $PYTHON_PATH/python -m pip install pyqubo --no-index -f dist

      - run: *init-pypirc

      - run:
          name: upload wheel
          command: |
            $PYTHON_PATH/python -m twine upload --skip-existing ./dist/*
          shell: bash.exe

  deploy-win-37:
    <<: *deploy-win-template
    environment:
      PYTHON: 3.7.3
      PYTHON_PATH: C:/tools/miniconda3

  deploy-win-38:
    <<: *deploy-win-template
    environment:
      PYTHON: 3.8.5
      PYTHON_PATH: C:/Python38/
  
  deploy-win-39:
    <<: *deploy-win-template
    environment:
      PYTHON: 3.9.1
      PYTHON_PATH: C:/Python39/

  deploy-win-35:
    <<: *deploy-win-template
    environment:
      PYTHON: 3.5.4
      PYTHON_PATH: C:/Python35/


workflows:
  tests:
    jobs:
      - test-linux-doctest

      - test-osx-35
      - test-osx-36
      - test-osx-37
      - test-osx-38
      - test-osx-39
      
      - test-win-35
      - test-win-36
      - test-win-37
      - test-win-38
      - test-win-39

      - test-linux-35
      - test-linux-36
      - test-linux-37
      - test-linux-38
      - test-linux-39

      - test-linux32-35
      - test-linux32-36
      - test-linux32-37
      - test-linux32-38
      - test-linux32-39
  
  deploy:
    jobs:
      
      - deploy-osx-35: &deploy-template
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+){2}?/
            branches:
              ignore: /.*/
      - deploy-osx-36:
          <<: *deploy-template
      - deploy-osx-37:
          <<: *deploy-template
      - deploy-osx-38:
          <<: *deploy-template
      - deploy-osx-39:
          <<: *deploy-template
      - deploy-win-35:
          <<: *deploy-template
      - deploy-win-36:
          <<: *deploy-template
      - deploy-win-37:
          <<: *deploy-template
      - deploy-win-38:
          <<: *deploy-template
      - deploy-win-39:
          <<: *deploy-template
      - deploy-linux:
          <<: *deploy-template
      - deploy-linux32:
          <<: *deploy-template
