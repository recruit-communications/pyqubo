name: Build&Upload

on:
  workflow_dispatch:
  release:
    types:
      - released

env:
  Python_Version: 3.9

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: ${{env.Python_Version}}
      - name: Build sdist
        run: |
          pip install -r requirements.txt
          python setup.py sdist
      - uses: actions/upload-artifact@v2
        with:
          name: WHEEL
          path: dist/*.tar.gz
          retention-days: 30
          
  build_wheels:
    name: Build wheels ${{ matrix.CIBW_BUILD }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:       
        include:  
         - CIBW_BUILD: cp37-manylinux_x86_64
           os: ubuntu-latest
           arch: x86_64
           CIBW_PLATFORM: linux
         - CIBW_BUILD: cp38-manylinux_x86_64
           os: ubuntu-latest
           arch: x86_64
           CIBW_PLATFORM: linux
         - CIBW_BUILD: cp39-manylinux_x86_64
           os: ubuntu-latest
           arch: x86_64
           CIBW_PLATFORM: linux 
         
         - CIBW_BUILD: cp37-manylinux_aarch64
           os: ubuntu-latest
           arch: aarch64
           CIBW_PLATFORM: linux  
         - CIBW_BUILD: cp38-manylinux_aarch64
           os: ubuntu-latest
           arch: aarch64
           CIBW_PLATFORM: linux  
         - CIBW_BUILD: cp39-manylinux_aarch64
           os: ubuntu-latest
           arch: aarch64
           CIBW_PLATFORM: linux 
         
         - CIBW_BUILD: cp37-macosx_x86_64
           os: macos-latest
           arch: x86_64
           CIBW_PLATFORM: macos  
         - CIBW_BUILD: cp38-macosx_x86_64
           os: macos-latest
           arch: x86_64
           CIBW_PLATFORM: macos  
         - CIBW_BUILD: cp39-macosx_x86_64
           os: macos-latest
           arch: x86_64
           CIBW_PLATFORM: macos 
         
         - CIBW_BUILD: cp38-macosx_arm64
           os: macos-latest
           arch: arm64
           CIBW_PLATFORM: macos 
         - CIBW_BUILD: cp39-macosx_arm64
           os: macos-latest
           arch: arm64
           CIBW_PLATFORM: macos 
         
         - CIBW_BUILD: cp38-win_amd64
           os: windows-latest
           arch: AMD64
           CIBW_PLATFORM: windows  
         - CIBW_BUILD: cp38-win_amd64
           os: windows-latest
           arch: AMD64
           CIBW_PLATFORM: windows  
         - CIBW_BUILD: cp39-win_amd64
           os: windows-latest
           arch: AMD64
           CIBW_PLATFORM: windows               
           
    steps:
      - uses: actions/checkout@v2         
      - name: Set up QEMU
        if: ${{ matrix.CIBW_PLATFORM == 'linux' && matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        if: ${{ matrix.CIBW_PLATFORM  == 'linux' }}
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
            install: true
      - name: Build wheels on ${{ matrix.CIBW_PLATFORM }} ${{matrix.arch}}
        uses: pypa/cibuildwheel@v1.12.0
        env:
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_BUILD: ${{matrix.CIBW_BUILD}}
          CIBW_ARCHS: ${{matrix.arch}}
          #CIBW_BUILD_FRONTEND: "build"
          CIBW_DEPENDENCY_VERSIONS: latest 
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.7"
          #CIBW_BUILD_VERBOSITY: 1
          
          CIBW_BEFORE_ALL: "" 
          CIBW_BEFORE_ALL_LINUX: "yum install -y centos-release-scl && yum install -y devtoolset-10"
          CIBW_BEFORE_ALL_MACOS: ""
          CIBW_BEFORE_ALL_WINDOWS: ""
          
          CIBW_BEFORE_BUILD: "pip install cmake"      
          CIBW_BEFORE_BUILD_MACOS: "pip install cmake"
          CIBE_BEFORE_BUILD_LINUX: "source scl_source enable devtoolset-10 && pip install cmake"
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel cmake"
                 
          
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "echo '::group::delocate-listdeps' && delocate-listdeps --all --depending {wheel} && echo '::endgroup::' && echo '::group::delocate-wheel' && delocate-wheel  --require-archs {delocate_archs} -w {dest_dir} -v {wheel} && echo '::endgroup::' && echo '::group::delocate-listdeps' && delocate-listdeps --all --depending {wheel} && echo '::endgroup::'"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel show {wheel} && delvewheel repair -w {dest_dir} {wheel}"
          
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64:latest
          CIBW_MANYLINUX_AARCH64_IMAGE: quay.io/pypa/manylinux2014_aarch64:latest
          
          CIBW_ENVIRONMENT:
              CFLAGS="-flto -O3 -pipe"
              CXXFLAGS="-flto -O3 -pipe"
          CIBW_ENVIRONMENT_MACOS:
              CFLAGS="-flto -O3 -pipe -lcblas -lclapack -framework Accelerate -framework OpenCL"
              CXXFLAGS="-flto -O3 -pipe -lcblas -lclapack -framework Accelerate -framework OpenCL"          

      - uses: actions/upload-artifact@v2
        with:
          name: WHEEL
          path: ./wheelhouse/*.whl
          retention-days: 30
          
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: WHEEL
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
